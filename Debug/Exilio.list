
Exilio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003400  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080035f0  080035f0  000045f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003658  08003658  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003658  08003658  00004658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003660  08003660  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003660  08003660  00004660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003664  08003664  00004664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003668  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  20000060  080036c8  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001648  080036c8  00005648  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8fe  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c5  00000000  00000000  00013987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00016250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af0  00000000  00000000  000170a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a5e  00000000  00000000  00017b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001031d  00000000  00000000  0003a5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c14b2  00000000  00000000  0004a90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bdbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  0010be00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010fb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	080035d8 	.word	0x080035d8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	080035d8 	.word	0x080035d8

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b968 	b.w	8000518 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fbb1 f4f7 	udiv	r4, r1, r7
 8000296:	fb07 1114 	mls	r1, r7, r4, r1
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8110 	bcs.w	80004da <__udivmoddi4+0x27a>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810d 	bls.w	80004da <__udivmoddi4+0x27a>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ca:	fb07 1110 	mls	r1, r7, r0, r1
 80002ce:	fb00 f606 	mul.w	r6, r0, r6
 80002d2:	fa1f f38e 	uxth.w	r3, lr
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fa 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f7 	bls.w	80004de <__udivmoddi4+0x27e>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	2100      	movs	r1, #0
 80002f6:	1b9b      	subs	r3, r3, r6
 80002f8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80ee 	bcc.w	8000508 <__udivmoddi4+0x2a8>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 808f 	bne.w	8000462 <__udivmoddi4+0x202>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	2101      	movs	r1, #1
 800034a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034e:	fa1f f78c 	uxth.w	r7, ip
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	fb08 4416 	mls	r4, r8, r6, r4
 800035a:	fb07 f006 	mul.w	r0, r7, r6
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000382:	fb08 4410 	mls	r4, r8, r0, r4
 8000386:	fb00 f707 	mul.w	r7, r0, r7
 800038a:	fa1f f38e 	uxth.w	r3, lr
 800038e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80ae 	bhi.w	8000502 <__udivmoddi4+0x2a2>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa24 f607 	lsr.w	r6, r4, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbb6 f8f9 	udiv	r8, r6, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 6618 	mls	r6, r9, r8, r6
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	408c      	lsls	r4, r1
 80003d8:	fa00 fa01 	lsl.w	sl, r0, r1
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	431c      	orrs	r4, r3
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003e8:	4298      	cmp	r0, r3
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	eb1c 0303 	adds.w	r3, ip, r3
 80003f4:	f108 36ff 	add.w	r6, r8, #4294967295
 80003f8:	f080 8081 	bcs.w	80004fe <__udivmoddi4+0x29e>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	d97e      	bls.n	80004fe <__udivmoddi4+0x29e>
 8000400:	f1a8 0802 	sub.w	r8, r8, #2
 8000404:	4463      	add	r3, ip
 8000406:	1a1e      	subs	r6, r3, r0
 8000408:	fbb6 f3f9 	udiv	r3, r6, r9
 800040c:	fb09 6613 	mls	r6, r9, r3, r6
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	b2a4      	uxth	r4, r4
 8000416:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800041a:	45a6      	cmp	lr, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1d0>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f103 30ff 	add.w	r0, r3, #4294967295
 8000426:	d266      	bcs.n	80004f6 <__udivmoddi4+0x296>
 8000428:	45a6      	cmp	lr, r4
 800042a:	d964      	bls.n	80004f6 <__udivmoddi4+0x296>
 800042c:	3b02      	subs	r3, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000434:	fba0 8302 	umull	r8, r3, r0, r2
 8000438:	eba4 040e 	sub.w	r4, r4, lr
 800043c:	429c      	cmp	r4, r3
 800043e:	46c6      	mov	lr, r8
 8000440:	461e      	mov	r6, r3
 8000442:	d350      	bcc.n	80004e6 <__udivmoddi4+0x286>
 8000444:	d04d      	beq.n	80004e2 <__udivmoddi4+0x282>
 8000446:	b155      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000448:	ebba 030e 	subs.w	r3, sl, lr
 800044c:	eb64 0406 	sbc.w	r4, r4, r6
 8000450:	fa04 f707 	lsl.w	r7, r4, r7
 8000454:	40cb      	lsrs	r3, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 7400 	strd	r7, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e751      	b.n	8000306 <__udivmoddi4+0xa6>
 8000462:	fa0c fc02 	lsl.w	ip, ip, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	40d9      	lsrs	r1, r3
 800046c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000470:	fa20 f303 	lsr.w	r3, r0, r3
 8000474:	fa00 fe02 	lsl.w	lr, r0, r2
 8000478:	fbb1 f0f8 	udiv	r0, r1, r8
 800047c:	fb08 1110 	mls	r1, r8, r0, r1
 8000480:	4094      	lsls	r4, r2
 8000482:	431c      	orrs	r4, r3
 8000484:	fa1f f78c 	uxth.w	r7, ip
 8000488:	0c23      	lsrs	r3, r4, #16
 800048a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048e:	fb00 f107 	mul.w	r1, r0, r7
 8000492:	4299      	cmp	r1, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x248>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 36ff 	add.w	r6, r0, #4294967295
 800049e:	d22c      	bcs.n	80004fa <__udivmoddi4+0x29a>
 80004a0:	4299      	cmp	r1, r3
 80004a2:	d92a      	bls.n	80004fa <__udivmoddi4+0x29a>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ae:	fb08 3311 	mls	r3, r8, r1, r3
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb01 f307 	mul.w	r3, r1, r7
 80004bc:	42a3      	cmp	r3, r4
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x272>
 80004c0:	eb1c 0404 	adds.w	r4, ip, r4
 80004c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004c8:	d213      	bcs.n	80004f2 <__udivmoddi4+0x292>
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d911      	bls.n	80004f2 <__udivmoddi4+0x292>
 80004ce:	3902      	subs	r1, #2
 80004d0:	4464      	add	r4, ip
 80004d2:	1ae4      	subs	r4, r4, r3
 80004d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d8:	e73b      	b.n	8000352 <__udivmoddi4+0xf2>
 80004da:	4604      	mov	r4, r0
 80004dc:	e6f2      	b.n	80002c4 <__udivmoddi4+0x64>
 80004de:	4608      	mov	r0, r1
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2af      	bcs.n	8000446 <__udivmoddi4+0x1e6>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb63 060c 	sbc.w	r6, r3, ip
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7a9      	b.n	8000446 <__udivmoddi4+0x1e6>
 80004f2:	4631      	mov	r1, r6
 80004f4:	e7ed      	b.n	80004d2 <__udivmoddi4+0x272>
 80004f6:	4603      	mov	r3, r0
 80004f8:	e79a      	b.n	8000430 <__udivmoddi4+0x1d0>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e7d4      	b.n	80004a8 <__udivmoddi4+0x248>
 80004fe:	46b0      	mov	r8, r6
 8000500:	e781      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000502:	4463      	add	r3, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e74f      	b.n	80003a8 <__udivmoddi4+0x148>
 8000508:	4606      	mov	r6, r0
 800050a:	4623      	mov	r3, r4
 800050c:	4608      	mov	r0, r1
 800050e:	e711      	b.n	8000334 <__udivmoddi4+0xd4>
 8000510:	3e02      	subs	r6, #2
 8000512:	4463      	add	r3, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x11c>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <vApplicationGetIdleTaskMemory+0x28>)
 800052c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <vApplicationGetIdleTaskMemory+0x2c>)
 8000532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2280      	movs	r2, #128	@ 0x80
 8000538:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	20000080 	.word	0x20000080
 8000548:	20000120 	.word	0x20000120

0800054c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000552:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <MX_FREERTOS_Init+0x30>)
 8000554:	1d3c      	adds	r4, r7, #4
 8000556:	461d      	mov	r5, r3
 8000558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fd53 	bl	8002014 <osThreadCreate>
 800056e:	4603      	mov	r3, r0
 8000570:	4a03      	ldr	r2, [pc, #12]	@ (8000580 <MX_FREERTOS_Init+0x34>)
 8000572:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}
 800057c:	080035fc 	.word	0x080035fc
 8000580:	2000007c 	.word	0x2000007c

08000584 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f001 fd8d 	bl	80020ac <osDelay>
 8000592:	e7fb      	b.n	800058c <StartDefaultTask+0x8>

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	@ 0x28
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a8:	4b51      	ldr	r3, [pc, #324]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a50      	ldr	r2, [pc, #320]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b4e      	ldr	r3, [pc, #312]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c0:	4b4b      	ldr	r3, [pc, #300]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a4a      	ldr	r2, [pc, #296]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b48      	ldr	r3, [pc, #288]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0310 	and.w	r3, r3, #16
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d8:	4b45      	ldr	r3, [pc, #276]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a44      	ldr	r2, [pc, #272]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b42      	ldr	r3, [pc, #264]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0308 	and.w	r3, r3, #8
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b3f      	ldr	r3, [pc, #252]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a3e      	ldr	r2, [pc, #248]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b3c      	ldr	r3, [pc, #240]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000608:	4b39      	ldr	r3, [pc, #228]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a38      	ldr	r2, [pc, #224]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b36      	ldr	r3, [pc, #216]	@ (80006f0 <MX_GPIO_Init+0x15c>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_E_Pin|LCD_RW_Pin|LCD_CS1_Pin
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 517c 	mov.w	r1, #16128	@ 0x3f00
 8000626:	4833      	ldr	r0, [pc, #204]	@ (80006f4 <MX_GPIO_Init+0x160>)
 8000628:	f000 fce8 	bl	8000ffc <HAL_GPIO_WritePin>
                          |LCD_CS2_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin|LED_2_Pin, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000632:	4830      	ldr	r0, [pc, #192]	@ (80006f4 <MX_GPIO_Init+0x160>)
 8000634:	f000 fce2 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_EXT_1_Pin|LED_EXT_2_Pin|LED_EXT_3_Pin|LED_EXT_4_Pin
 8000638:	2200      	movs	r2, #0
 800063a:	21fe      	movs	r1, #254	@ 0xfe
 800063c:	482e      	ldr	r0, [pc, #184]	@ (80006f8 <MX_GPIO_Init+0x164>)
 800063e:	f000 fcdd 	bl	8000ffc <HAL_GPIO_WritePin>
                          |LED_EXT_5_Pin|LED_EXT_6_Pin|LED_EXT_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_D2_Pin LCD_D3_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin LCD_D0_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000642:	23ff      	movs	r3, #255	@ 0xff
 8000644:	61bb      	str	r3, [r7, #24]
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D0_Pin|LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4619      	mov	r1, r3
 8000654:	4827      	ldr	r0, [pc, #156]	@ (80006f4 <MX_GPIO_Init+0x160>)
 8000656:	f000 fb4d 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin SW_EXT_1_Pin JOY_UP_Pin JOY_DOWN_Pin
                           JOY_RIGHT_Pin JOY_LEFT_Pin JOY_OK_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW_EXT_1_Pin|JOY_UP_Pin|JOY_DOWN_Pin
 800065a:	f243 33f0 	movw	r3, #13296	@ 0x33f0
 800065e:	61bb      	str	r3, [r7, #24]
                          |JOY_RIGHT_Pin|JOY_LEFT_Pin|JOY_OK_Pin|SW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	4619      	mov	r1, r3
 800066e:	4823      	ldr	r0, [pc, #140]	@ (80006fc <MX_GPIO_Init+0x168>)
 8000670:	f000 fb40 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_EXT_4_Pin SW_EXT_2_Pin SW_EXT_6_Pin SW_EXT_5_Pin
                           SW_EXT_3_Pin */
  GPIO_InitStruct.Pin = SW_EXT_4_Pin|SW_EXT_2_Pin|SW_EXT_6_Pin|SW_EXT_5_Pin
 8000674:	f24c 2322 	movw	r3, #49698	@ 0xc222
 8000678:	61bb      	str	r3, [r7, #24]
                          |SW_EXT_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	4619      	mov	r1, r3
 8000688:	481d      	ldr	r0, [pc, #116]	@ (8000700 <MX_GPIO_Init+0x16c>)
 800068a:	f000 fb33 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_RW_Pin LCD_CS1_Pin
                           LCD_CS2_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_RW_Pin|LCD_CS1_Pin
 800068e:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8000692:	61bb      	str	r3, [r7, #24]
                          |LCD_CS2_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2302      	movs	r3, #2
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a0:	f107 0318 	add.w	r3, r7, #24
 80006a4:	4619      	mov	r1, r3
 80006a6:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <MX_GPIO_Init+0x160>)
 80006a8:	f000 fb24 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80006ac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006b2:	2311      	movs	r3, #17
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2302      	movs	r3, #2
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <MX_GPIO_Init+0x160>)
 80006c6:	f000 fb15 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_EXT_1_Pin LED_EXT_2_Pin LED_EXT_3_Pin LED_EXT_4_Pin
                           LED_EXT_5_Pin LED_EXT_6_Pin LED_EXT_7_Pin */
  GPIO_InitStruct.Pin = LED_EXT_1_Pin|LED_EXT_2_Pin|LED_EXT_3_Pin|LED_EXT_4_Pin
 80006ca:	23fe      	movs	r3, #254	@ 0xfe
 80006cc:	61bb      	str	r3, [r7, #24]
                          |LED_EXT_5_Pin|LED_EXT_6_Pin|LED_EXT_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2302      	movs	r3, #2
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_GPIO_Init+0x164>)
 80006e2:	f000 fb07 	bl	8000cf4 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	@ 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40011800 	.word	0x40011800
 80006f8:	40011400 	.word	0x40011400
 80006fc:	40011000 	.word	0x40011000
 8000700:	40010c00 	.word	0x40010c00

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 f9e2 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f80a 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f7ff ff40 	bl	8000594 <MX_GPIO_Init>
  MX_TIM7_Init();
 8000714:	f000 f95a 	bl	80009cc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000718:	f7ff ff18 	bl	800054c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800071c:	f001 fc73 	bl	8002006 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <main+0x1c>

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0318 	add.w	r3, r7, #24
 800072e:	2238      	movs	r2, #56	@ 0x38
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fe78 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000750:	2304      	movs	r3, #4
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000768:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800076c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000772:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000776:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 8000778:	2310      	movs	r3, #16
 800077a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fc53 	bl	800102c <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	bf14      	ite	ne
 800078c:	2301      	movne	r3, #1
 800078e:	2300      	moveq	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000796:	f000 f835 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2102      	movs	r1, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 ff4f 	bl	8001658 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf14      	ite	ne
 80007c0:	2301      	movne	r3, #1
 80007c2:	2300      	moveq	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007ca:	f000 f81b 	bl	8000804 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80007ce:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <SystemClock_Config+0xb8>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	@ 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	42420070 	.word	0x42420070

080007e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f2:	f000 f983 	bl	8000afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40012c00 	.word	0x40012c00

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <HAL_MspInit+0x68>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a17      	ldr	r2, [pc, #92]	@ (8000878 <HAL_MspInit+0x68>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6193      	str	r3, [r2, #24]
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <HAL_MspInit+0x68>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <HAL_MspInit+0x68>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a11      	ldr	r2, [pc, #68]	@ (8000878 <HAL_MspInit+0x68>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <HAL_MspInit+0x68>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	210f      	movs	r1, #15
 800084a:	f06f 0001 	mvn.w	r0, #1
 800084e:	f000 fa26 	bl	8000c9e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000852:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <HAL_MspInit+0x6c>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4a04      	ldr	r2, [pc, #16]	@ (800087c <HAL_MspInit+0x6c>)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	40010000 	.word	0x40010000

08000880 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000896:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <HAL_InitTick+0xd0>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a2d      	ldr	r2, [pc, #180]	@ (8000950 <HAL_InitTick+0xd0>)
 800089c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <HAL_InitTick+0xd0>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ae:	f107 020c 	add.w	r2, r7, #12
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 f891 	bl	80019e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008be:	f001 f87b 	bl	80019b8 <HAL_RCC_GetPCLK2Freq>
 80008c2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c6:	4a23      	ldr	r2, [pc, #140]	@ (8000954 <HAL_InitTick+0xd4>)
 80008c8:	fba2 2303 	umull	r2, r3, r2, r3
 80008cc:	0c9b      	lsrs	r3, r3, #18
 80008ce:	3b01      	subs	r3, #1
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <HAL_InitTick+0xd8>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	@ (800095c <HAL_InitTick+0xdc>)
 80008d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <HAL_InitTick+0xd8>)
 80008da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008de:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000958 <HAL_InitTick+0xd8>)
 80008e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <HAL_InitTick+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <HAL_InitTick+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <HAL_InitTick+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008f8:	4817      	ldr	r0, [pc, #92]	@ (8000958 <HAL_InitTick+0xd8>)
 80008fa:	f001 f8bf 	bl	8001a7c <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000904:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000908:	2b00      	cmp	r3, #0
 800090a:	d11b      	bne.n	8000944 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800090c:	4812      	ldr	r0, [pc, #72]	@ (8000958 <HAL_InitTick+0xd8>)
 800090e:	f001 f905 	bl	8001b1c <HAL_TIM_Base_Start_IT>
 8000912:	4603      	mov	r3, r0
 8000914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000918:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800091c:	2b00      	cmp	r3, #0
 800091e:	d111      	bne.n	8000944 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000920:	2019      	movs	r0, #25
 8000922:	f000 f9d8 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d808      	bhi.n	800093e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	2019      	movs	r0, #25
 8000932:	f000 f9b4 	bl	8000c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <HAL_InitTick+0xe0>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	e002      	b.n	8000944 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000944:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000948:	4618      	mov	r0, r3
 800094a:	3730      	adds	r7, #48	@ 0x30
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	431bde83 	.word	0x431bde83
 8000958:	20000320 	.word	0x20000320
 800095c:	40012c00 	.word	0x40012c00
 8000960:	20000004 	.word	0x20000004

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <NMI_Handler+0x4>

0800096c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <MemManage_Handler+0x4>

0800097c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <UsageFault_Handler+0x4>

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800099c:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <TIM1_UP_IRQHandler+0x10>)
 800099e:	f001 f917 	bl	8001bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000320 	.word	0x20000320

080009ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIM7_IRQHandler+0x10>)
 80009b2:	f001 f90d 	bl	8001bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000368 	.word	0x20000368

080009c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d2:	463b      	mov	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <MX_TIM7_Init+0x64>)
 80009dc:	4a15      	ldr	r2, [pc, #84]	@ (8000a34 <MX_TIM7_Init+0x68>)
 80009de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200;
 80009e0:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <MX_TIM7_Init+0x64>)
 80009e2:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 80009e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_TIM7_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <MX_TIM7_Init+0x64>)
 80009f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_TIM7_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009fc:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <MX_TIM7_Init+0x64>)
 80009fe:	f001 f83d 	bl	8001a7c <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a08:	f7ff fefc 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_TIM7_Init+0x64>)
 8000a1a:	f001 fa65 	bl	8001ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a24:	f7ff feee 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000368 	.word	0x20000368
 8000a34:	40001400 	.word	0x40001400

08000a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <HAL_TIM_Base_MspInit+0x44>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d113      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <HAL_TIM_Base_MspInit+0x48>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a80 <HAL_TIM_Base_MspInit+0x48>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_TIM_Base_MspInit+0x48>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	2037      	movs	r0, #55	@ 0x37
 8000a68:	f000 f919 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a6c:	2037      	movs	r0, #55	@ 0x37
 8000a6e:	f000 f932 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40001400 	.word	0x40001400
 8000a80:	40021000 	.word	0x40021000

08000a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a84:	f7ff ff9c 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a8a:	490c      	ldr	r1, [pc, #48]	@ (8000abc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000aa0:	4c09      	ldr	r4, [pc, #36]	@ (8000ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 fd19 	bl	80034e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab2:	f7ff fe27 	bl	8000704 <main>
  bx lr
 8000ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ac0:	08003668 	.word	0x08003668
  ldr r2, =_sbss
 8000ac4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ac8:	20001648 	.word	0x20001648

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <HAL_Init+0x28>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	@ (8000af8 <HAL_Init+0x28>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f8d1 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	200f      	movs	r0, #15
 8000ae8:	f7ff feca 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff fe90 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40022000 	.word	0x40022000

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a03      	ldr	r2, [pc, #12]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200003b0 	.word	0x200003b0

08000b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	200003b0 	.word	0x200003b0

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4906      	ldr	r1, [pc, #24]	@ (8000bcc <__NVIC_EnableIRQ+0x34>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	@ (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	@ (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	@ 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	@ 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff4f 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff64 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ffb2 	bl	8000c24 <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff81 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff57 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b08b      	sub	sp, #44	@ 0x2c
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d06:	e169      	b.n	8000fdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f040 8158 	bne.w	8000fd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	4a9a      	ldr	r2, [pc, #616]	@ (8000f94 <HAL_GPIO_Init+0x2a0>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d05e      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d30:	4a98      	ldr	r2, [pc, #608]	@ (8000f94 <HAL_GPIO_Init+0x2a0>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d875      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d36:	4a98      	ldr	r2, [pc, #608]	@ (8000f98 <HAL_GPIO_Init+0x2a4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d058      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d3c:	4a96      	ldr	r2, [pc, #600]	@ (8000f98 <HAL_GPIO_Init+0x2a4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d86f      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d42:	4a96      	ldr	r2, [pc, #600]	@ (8000f9c <HAL_GPIO_Init+0x2a8>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d052      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d48:	4a94      	ldr	r2, [pc, #592]	@ (8000f9c <HAL_GPIO_Init+0x2a8>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d869      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d4e:	4a94      	ldr	r2, [pc, #592]	@ (8000fa0 <HAL_GPIO_Init+0x2ac>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d04c      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d54:	4a92      	ldr	r2, [pc, #584]	@ (8000fa0 <HAL_GPIO_Init+0x2ac>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d863      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d5a:	4a92      	ldr	r2, [pc, #584]	@ (8000fa4 <HAL_GPIO_Init+0x2b0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d046      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
 8000d60:	4a90      	ldr	r2, [pc, #576]	@ (8000fa4 <HAL_GPIO_Init+0x2b0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d85d      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d82a      	bhi.n	8000dc0 <HAL_GPIO_Init+0xcc>
 8000d6a:	2b12      	cmp	r3, #18
 8000d6c:	d859      	bhi.n	8000e22 <HAL_GPIO_Init+0x12e>
 8000d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d74 <HAL_GPIO_Init+0x80>)
 8000d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000dc9 	.word	0x08000dc9
 8000d7c:	08000ddb 	.word	0x08000ddb
 8000d80:	08000e1d 	.word	0x08000e1d
 8000d84:	08000e23 	.word	0x08000e23
 8000d88:	08000e23 	.word	0x08000e23
 8000d8c:	08000e23 	.word	0x08000e23
 8000d90:	08000e23 	.word	0x08000e23
 8000d94:	08000e23 	.word	0x08000e23
 8000d98:	08000e23 	.word	0x08000e23
 8000d9c:	08000e23 	.word	0x08000e23
 8000da0:	08000e23 	.word	0x08000e23
 8000da4:	08000e23 	.word	0x08000e23
 8000da8:	08000e23 	.word	0x08000e23
 8000dac:	08000e23 	.word	0x08000e23
 8000db0:	08000e23 	.word	0x08000e23
 8000db4:	08000e23 	.word	0x08000e23
 8000db8:	08000dd1 	.word	0x08000dd1
 8000dbc:	08000de5 	.word	0x08000de5
 8000dc0:	4a79      	ldr	r2, [pc, #484]	@ (8000fa8 <HAL_GPIO_Init+0x2b4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d013      	beq.n	8000dee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dc6:	e02c      	b.n	8000e22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e029      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	623b      	str	r3, [r7, #32]
          break;
 8000dd8:	e024      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	3308      	adds	r3, #8
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e01f      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	330c      	adds	r3, #12
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e01a      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000df6:	2304      	movs	r3, #4
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e013      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d105      	bne.n	8000e10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e04:	2308      	movs	r3, #8
 8000e06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69fa      	ldr	r2, [r7, #28]
 8000e0c:	611a      	str	r2, [r3, #16]
          break;
 8000e0e:	e009      	b.n	8000e24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e10:	2308      	movs	r3, #8
 8000e12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	615a      	str	r2, [r3, #20]
          break;
 8000e1a:	e003      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
          break;
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x130>
          break;
 8000e22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	2bff      	cmp	r3, #255	@ 0xff
 8000e28:	d801      	bhi.n	8000e2e <HAL_GPIO_Init+0x13a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	e001      	b.n	8000e32 <HAL_GPIO_Init+0x13e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3304      	adds	r3, #4
 8000e32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2bff      	cmp	r3, #255	@ 0xff
 8000e38:	d802      	bhi.n	8000e40 <HAL_GPIO_Init+0x14c>
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	e002      	b.n	8000e46 <HAL_GPIO_Init+0x152>
 8000e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e42:	3b08      	subs	r3, #8
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	6a39      	ldr	r1, [r7, #32]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	431a      	orrs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e74:	4b4d      	ldr	r3, [pc, #308]	@ (8000fac <HAL_GPIO_Init+0x2b8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a4c      	ldr	r2, [pc, #304]	@ (8000fac <HAL_GPIO_Init+0x2b8>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b4a      	ldr	r3, [pc, #296]	@ (8000fac <HAL_GPIO_Init+0x2b8>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e8c:	4a48      	ldr	r2, [pc, #288]	@ (8000fb0 <HAL_GPIO_Init+0x2bc>)
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a40      	ldr	r2, [pc, #256]	@ (8000fb4 <HAL_GPIO_Init+0x2c0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d013      	beq.n	8000ee0 <HAL_GPIO_Init+0x1ec>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a3f      	ldr	r2, [pc, #252]	@ (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d00d      	beq.n	8000edc <HAL_GPIO_Init+0x1e8>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8000fbc <HAL_GPIO_Init+0x2c8>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d007      	beq.n	8000ed8 <HAL_GPIO_Init+0x1e4>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a3d      	ldr	r2, [pc, #244]	@ (8000fc0 <HAL_GPIO_Init+0x2cc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d101      	bne.n	8000ed4 <HAL_GPIO_Init+0x1e0>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e006      	b.n	8000ee2 <HAL_GPIO_Init+0x1ee>
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	e004      	b.n	8000ee2 <HAL_GPIO_Init+0x1ee>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e002      	b.n	8000ee2 <HAL_GPIO_Init+0x1ee>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <HAL_GPIO_Init+0x1ee>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee4:	f002 0203 	and.w	r2, r2, #3
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	4093      	lsls	r3, r2
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ef2:	492f      	ldr	r1, [pc, #188]	@ (8000fb0 <HAL_GPIO_Init+0x2bc>)
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	492c      	ldr	r1, [pc, #176]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	608b      	str	r3, [r1, #8]
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4928      	ldr	r1, [pc, #160]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f34:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	4922      	ldr	r1, [pc, #136]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	60cb      	str	r3, [r1, #12]
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f42:	4b20      	ldr	r3, [pc, #128]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	491e      	ldr	r1, [pc, #120]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	4918      	ldr	r1, [pc, #96]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f6a:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4914      	ldr	r1, [pc, #80]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d021      	beq.n	8000fc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	490e      	ldr	r1, [pc, #56]	@ (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
 8000f90:	e021      	b.n	8000fd6 <HAL_GPIO_Init+0x2e2>
 8000f92:	bf00      	nop
 8000f94:	10320000 	.word	0x10320000
 8000f98:	10310000 	.word	0x10310000
 8000f9c:	10220000 	.word	0x10220000
 8000fa0:	10210000 	.word	0x10210000
 8000fa4:	10120000 	.word	0x10120000
 8000fa8:	10110000 	.word	0x10110000
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40011400 	.word	0x40011400
 8000fc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <HAL_GPIO_Init+0x304>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	4909      	ldr	r1, [pc, #36]	@ (8000ff8 <HAL_GPIO_Init+0x304>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd8:	3301      	adds	r3, #1
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f47f ae8e 	bne.w	8000d08 <HAL_GPIO_Init+0x14>
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	372c      	adds	r7, #44	@ 0x2c
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	611a      	str	r2, [r3, #16]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e304      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8087 	beq.w	800115a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800104c:	4b92      	ldr	r3, [pc, #584]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b04      	cmp	r3, #4
 8001056:	d00c      	beq.n	8001072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001058:	4b8f      	ldr	r3, [pc, #572]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d112      	bne.n	800108a <HAL_RCC_OscConfig+0x5e>
 8001064:	4b8c      	ldr	r3, [pc, #560]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800106c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001070:	d10b      	bne.n	800108a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	4b89      	ldr	r3, [pc, #548]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d06c      	beq.n	8001158 <HAL_RCC_OscConfig+0x12c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d168      	bne.n	8001158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e2de      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x76>
 8001094:	4b80      	ldr	r3, [pc, #512]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a7f      	ldr	r2, [pc, #508]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e02e      	b.n	8001100 <HAL_RCC_OscConfig+0xd4>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x98>
 80010aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a7a      	ldr	r2, [pc, #488]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b78      	ldr	r3, [pc, #480]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a77      	ldr	r2, [pc, #476]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e01d      	b.n	8001100 <HAL_RCC_OscConfig+0xd4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0xbc>
 80010ce:	4b72      	ldr	r3, [pc, #456]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a71      	ldr	r2, [pc, #452]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b6f      	ldr	r3, [pc, #444]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6e      	ldr	r2, [pc, #440]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0xd4>
 80010e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b68      	ldr	r3, [pc, #416]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a67      	ldr	r2, [pc, #412]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fd0a 	bl	8000b20 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fd06 	bl	8000b20 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	@ 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e292      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	4b5d      	ldr	r3, [pc, #372]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0xe4>
 800112e:	e014      	b.n	800115a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fcf6 	bl	8000b20 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fcf2 	bl	8000b20 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	@ 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e27e      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	4b53      	ldr	r3, [pc, #332]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x10c>
 8001156:	e000      	b.n	800115a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d063      	beq.n	800122e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001166:	4b4c      	ldr	r3, [pc, #304]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001172:	4b49      	ldr	r3, [pc, #292]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b08      	cmp	r3, #8
 800117c:	d11c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x18c>
 800117e:	4b46      	ldr	r3, [pc, #280]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d116      	bne.n	80011b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118a:	4b43      	ldr	r3, [pc, #268]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <HAL_RCC_OscConfig+0x176>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e252      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4939      	ldr	r1, [pc, #228]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	e03a      	b.n	800122e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d020      	beq.n	8001202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c0:	4b36      	ldr	r3, [pc, #216]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fcab 	bl	8000b20 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ce:	f7ff fca7 	bl	8000b20 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e233      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4927      	ldr	r1, [pc, #156]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001202:	4b26      	ldr	r3, [pc, #152]	@ (800129c <HAL_RCC_OscConfig+0x270>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fc8a 	bl	8000b20 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001210:	f7ff fc86 	bl	8000b20 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e212      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d03a      	beq.n	80012b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d019      	beq.n	8001276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <HAL_RCC_OscConfig+0x274>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001248:	f7ff fc6a 	bl	8000b20 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001250:	f7ff fc66 	bl	8000b20 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e1f2      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f000 fbe6 	bl	8001a40 <RCC_Delay>
 8001274:	e01c      	b.n	80012b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_RCC_OscConfig+0x274>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fc50 	bl	8000b20 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001282:	e00f      	b.n	80012a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fc4c 	bl	8000b20 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d908      	bls.n	80012a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e1d8      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	42420000 	.word	0x42420000
 80012a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	4b9b      	ldr	r3, [pc, #620]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e9      	bne.n	8001284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a6 	beq.w	800140a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c2:	4b94      	ldr	r3, [pc, #592]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10d      	bne.n	80012ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b91      	ldr	r3, [pc, #580]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a90      	ldr	r2, [pc, #576]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b8e      	ldr	r3, [pc, #568]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e6:	2301      	movs	r3, #1
 80012e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001518 <HAL_RCC_OscConfig+0x4ec>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d118      	bne.n	8001328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f6:	4b88      	ldr	r3, [pc, #544]	@ (8001518 <HAL_RCC_OscConfig+0x4ec>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a87      	ldr	r2, [pc, #540]	@ (8001518 <HAL_RCC_OscConfig+0x4ec>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fc0d 	bl	8000b20 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff fc09 	bl	8000b20 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b64      	cmp	r3, #100	@ 0x64
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e195      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b7e      	ldr	r3, [pc, #504]	@ (8001518 <HAL_RCC_OscConfig+0x4ec>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x312>
 8001330:	4b78      	ldr	r3, [pc, #480]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a77      	ldr	r2, [pc, #476]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6213      	str	r3, [r2, #32]
 800133c:	e02d      	b.n	800139a <HAL_RCC_OscConfig+0x36e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x334>
 8001346:	4b73      	ldr	r3, [pc, #460]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a72      	ldr	r2, [pc, #456]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6213      	str	r3, [r2, #32]
 8001352:	4b70      	ldr	r3, [pc, #448]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4a6f      	ldr	r2, [pc, #444]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001358:	f023 0304 	bic.w	r3, r3, #4
 800135c:	6213      	str	r3, [r2, #32]
 800135e:	e01c      	b.n	800139a <HAL_RCC_OscConfig+0x36e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b05      	cmp	r3, #5
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x356>
 8001368:	4b6a      	ldr	r3, [pc, #424]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a69      	ldr	r2, [pc, #420]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	4b67      	ldr	r3, [pc, #412]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a66      	ldr	r2, [pc, #408]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6213      	str	r3, [r2, #32]
 8001380:	e00b      	b.n	800139a <HAL_RCC_OscConfig+0x36e>
 8001382:	4b64      	ldr	r3, [pc, #400]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	4a63      	ldr	r2, [pc, #396]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6213      	str	r3, [r2, #32]
 800138e:	4b61      	ldr	r3, [pc, #388]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4a60      	ldr	r2, [pc, #384]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001394:	f023 0304 	bic.w	r3, r3, #4
 8001398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d015      	beq.n	80013ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fbbd 	bl	8000b20 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	e00a      	b.n	80013c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff fbb9 	bl	8000b20 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e143      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c0:	4b54      	ldr	r3, [pc, #336]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0ee      	beq.n	80013aa <HAL_RCC_OscConfig+0x37e>
 80013cc:	e014      	b.n	80013f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fba7 	bl	8000b20 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7ff fba3 	bl	8000b20 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e12d      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ec:	4b49      	ldr	r3, [pc, #292]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1ee      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d105      	bne.n	800140a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fe:	4b45      	ldr	r3, [pc, #276]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a44      	ldr	r2, [pc, #272]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 808c 	beq.w	800152c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001414:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001420:	d10e      	bne.n	8001440 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001422:	4b3c      	ldr	r3, [pc, #240]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800142a:	2b08      	cmp	r3, #8
 800142c:	d108      	bne.n	8001440 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800142e:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143a:	d101      	bne.n	8001440 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e103      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001444:	2b02      	cmp	r3, #2
 8001446:	d14e      	bne.n	80014e6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001448:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001454:	4b2f      	ldr	r3, [pc, #188]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001458:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0ef      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001468:	4b2c      	ldr	r3, [pc, #176]	@ (800151c <HAL_RCC_OscConfig+0x4f0>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fb57 	bl	8000b20 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001476:	f7ff fb53 	bl	8000b20 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b64      	cmp	r3, #100	@ 0x64
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e0df      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001488:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a0:	491c      	ldr	r1, [pc, #112]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80014a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4918      	ldr	r1, [pc, #96]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <HAL_RCC_OscConfig+0x4f0>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fb2f 	bl	8000b20 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80014c6:	f7ff fb2b 	bl	8000b20 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b64      	cmp	r3, #100	@ 0x64
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e0b7      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x49a>
 80014e4:	e022      	b.n	800152c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_RCC_OscConfig+0x4f0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb12 	bl	8000b20 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80014fe:	e00f      	b.n	8001520 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001500:	f7ff fb0e 	bl	8000b20 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	@ 0x64
 800150c:	d908      	bls.n	8001520 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e09a      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	40007000 	.word	0x40007000
 800151c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001520:	4b4b      	ldr	r3, [pc, #300]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1e9      	bne.n	8001500 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8088 	beq.w	8001646 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001536:	4b46      	ldr	r3, [pc, #280]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b08      	cmp	r3, #8
 8001540:	d068      	beq.n	8001614 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d14d      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154a:	4b42      	ldr	r3, [pc, #264]	@ (8001654 <HAL_RCC_OscConfig+0x628>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fae6 	bl	8000b20 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fae2 	bl	8000b20 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e06e      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156a:	4b39      	ldr	r3, [pc, #228]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800157e:	d10f      	bne.n	80015a0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001580:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 8001582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4931      	ldr	r1, [pc, #196]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 800158a:	4313      	orrs	r3, r2
 800158c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800158e:	4b30      	ldr	r3, [pc, #192]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 8001590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001592:	f023 020f 	bic.w	r2, r3, #15
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	492d      	ldr	r1, [pc, #180]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 800159c:	4313      	orrs	r3, r2
 800159e:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b0:	430b      	orrs	r3, r1
 80015b2:	4927      	ldr	r1, [pc, #156]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <HAL_RCC_OscConfig+0x628>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff faaf 	bl	8000b20 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff faab 	bl	8000b20 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e037      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x59a>
 80015e4:	e02f      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x628>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fa98 	bl	8000b20 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fa94 	bl	8000b20 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e020      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5c8>
 8001612:	e018      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e013      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_RCC_OscConfig+0x624>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	429a      	cmp	r2, r3
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	42420060 	.word	0x42420060

08001658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0d0      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b6a      	ldr	r3, [pc, #424]	@ (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d910      	bls.n	800169c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b67      	ldr	r3, [pc, #412]	@ (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 0207 	bic.w	r2, r3, #7
 8001682:	4965      	ldr	r1, [pc, #404]	@ (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b8      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b59      	ldr	r3, [pc, #356]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a58      	ldr	r2, [pc, #352]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b53      	ldr	r3, [pc, #332]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a52      	ldr	r2, [pc, #328]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b50      	ldr	r3, [pc, #320]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494d      	ldr	r1, [pc, #308]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d040      	beq.n	8001778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b47      	ldr	r3, [pc, #284]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d115      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07f      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b41      	ldr	r3, [pc, #260]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e073      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	4b3d      	ldr	r3, [pc, #244]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e06b      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001736:	4b39      	ldr	r3, [pc, #228]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f023 0203 	bic.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4936      	ldr	r1, [pc, #216]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff f9ea 	bl	8000b20 <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff f9e6 	bl	8000b20 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e053      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 020c 	and.w	r2, r3, #12
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d1eb      	bne.n	8001750 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001778:	4b27      	ldr	r3, [pc, #156]	@ (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d210      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 0207 	bic.w	r2, r3, #7
 800178e:	4922      	ldr	r1, [pc, #136]	@ (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e032      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4916      	ldr	r1, [pc, #88]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490e      	ldr	r1, [pc, #56]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f821 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	490a      	ldr	r1, [pc, #40]	@ (8001820 <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <HAL_RCC_ClockConfig+0x1cc>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_RCC_ClockConfig+0x1d0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f83a 	bl	8000880 <HAL_InitTick>

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000
 800181c:	40021000 	.word	0x40021000
 8001820:	08003620 	.word	0x08003620
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001830:	b08e      	sub	sp, #56	@ 0x38
 8001832:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001850:	4b4e      	ldr	r3, [pc, #312]	@ (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b04      	cmp	r3, #4
 800185e:	d002      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x3a>
 8001860:	2b08      	cmp	r3, #8
 8001862:	d003      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x40>
 8001864:	e089      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001866:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x164>)
 8001868:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800186a:	e089      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800186c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186e:	0c9b      	lsrs	r3, r3, #18
 8001870:	f003 020f 	and.w	r2, r3, #15
 8001874:	4b47      	ldr	r3, [pc, #284]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x168>)
 8001876:	5c9b      	ldrb	r3, [r3, r2]
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800187a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d072      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001884:	4b41      	ldr	r3, [pc, #260]	@ (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001888:	f003 020f 	and.w	r2, r3, #15
 800188c:	4b42      	ldr	r3, [pc, #264]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x16c>)
 800188e:	5c9b      	ldrb	r3, [r3, r2]
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001892:	4b3e      	ldr	r3, [pc, #248]	@ (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d053      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800189e:	4b3b      	ldr	r3, [pc, #236]	@ (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	3301      	adds	r3, #1
 80018aa:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80018ac:	4b37      	ldr	r3, [pc, #220]	@ (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 80018ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3302      	adds	r3, #2
 80018b8:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2200      	movs	r2, #0
 80018be:	469a      	mov	sl, r3
 80018c0:	4693      	mov	fp, r2
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	2200      	movs	r2, #0
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	617a      	str	r2, [r7, #20]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fb03 f20b 	mul.w	r2, r3, fp
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fb0a f303 	mul.w	r3, sl, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	fbaa 0102 	umull	r0, r1, sl, r2
 80018de:	440b      	add	r3, r1
 80018e0:	4619      	mov	r1, r3
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x164>)
 80018e4:	fb03 f201 	mul.w	r2, r3, r1
 80018e8:	2300      	movs	r3, #0
 80018ea:	fb00 f303 	mul.w	r3, r0, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x164>)
 80018f2:	fba0 4502 	umull	r4, r5, r0, r2
 80018f6:	442b      	add	r3, r5
 80018f8:	461d      	mov	r5, r3
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	2200      	movs	r2, #0
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	60fa      	str	r2, [r7, #12]
 8001902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001904:	2200      	movs	r2, #0
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800190e:	460b      	mov	r3, r1
 8001910:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001914:	4652      	mov	r2, sl
 8001916:	fb02 f203 	mul.w	r2, r2, r3
 800191a:	465b      	mov	r3, fp
 800191c:	4684      	mov	ip, r0
 800191e:	fb0c f303 	mul.w	r3, ip, r3
 8001922:	4413      	add	r3, r2
 8001924:	4602      	mov	r2, r0
 8001926:	4651      	mov	r1, sl
 8001928:	fba2 8901 	umull	r8, r9, r2, r1
 800192c:	444b      	add	r3, r9
 800192e:	4699      	mov	r9, r3
 8001930:	4642      	mov	r2, r8
 8001932:	464b      	mov	r3, r9
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fc7a 	bl	8000230 <__aeabi_uldivmod>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4613      	mov	r3, r2
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
 8001944:	e007      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x164>)
 800194a:	fb03 f202 	mul.w	r2, r3, r2
 800194e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x168>)
 8001958:	7b5b      	ldrb	r3, [r3, #13]
 800195a:	461a      	mov	r2, r3
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	4293      	cmp	r3, r2
 8001960:	d108      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8001962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	637b      	str	r3, [r7, #52]	@ 0x34
 8001968:	e004      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	4a0b      	ldr	r2, [pc, #44]	@ (800199c <HAL_RCC_GetSysClockFreq+0x170>)
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8001974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001978:	e002      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x174>)
 800197c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800197e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001982:	4618      	mov	r0, r3
 8001984:	3738      	adds	r7, #56	@ 0x38
 8001986:	46bd      	mov	sp, r7
 8001988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	00989680 	.word	0x00989680
 8001994:	08003638 	.word	0x08003638
 8001998:	08003648 	.word	0x08003648
 800199c:	003d0900 	.word	0x003d0900
 80019a0:	007a1200 	.word	0x007a1200

080019a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a8:	4b02      	ldr	r3, [pc, #8]	@ (80019b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019bc:	f7ff fff2 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0adb      	lsrs	r3, r3, #11
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	@ (80019dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08003630 	.word	0x08003630

080019e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	220f      	movs	r2, #15
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_RCC_GetClockConfig+0x58>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <HAL_RCC_GetClockConfig+0x58>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_RCC_GetClockConfig+0x58>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <HAL_RCC_GetClockConfig+0x58>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0207 	and.w	r2, r3, #7
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40022000 	.word	0x40022000

08001a40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a48:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <RCC_Delay+0x34>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <RCC_Delay+0x38>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0a5b      	lsrs	r3, r3, #9
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a5c:	bf00      	nop
  }
  while (Delay --);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	60fa      	str	r2, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <RCC_Delay+0x1c>
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000000 	.word	0x20000000
 8001a78:	10624dd3 	.word	0x10624dd3

08001a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e041      	b.n	8001b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7fe ffc8 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f000 f99c 	bl	8001df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d001      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e03f      	b.n	8001bb4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <HAL_TIM_Base_Start_IT+0xa4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_TIM_Base_Start_IT+0x62>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5e:	d00e      	beq.n	8001b7e <HAL_TIM_Base_Start_IT+0x62>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <HAL_TIM_Base_Start_IT+0xa8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d009      	beq.n	8001b7e <HAL_TIM_Base_Start_IT+0x62>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a16      	ldr	r2, [pc, #88]	@ (8001bc8 <HAL_TIM_Base_Start_IT+0xac>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d004      	beq.n	8001b7e <HAL_TIM_Base_Start_IT+0x62>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a14      	ldr	r2, [pc, #80]	@ (8001bcc <HAL_TIM_Base_Start_IT+0xb0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d111      	bne.n	8001ba2 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d010      	beq.n	8001bb2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba0:	e007      	b.n	8001bb2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0201 	orr.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40000400 	.word	0x40000400
 8001bc8:	40000800 	.word	0x40000800
 8001bcc:	40000c00 	.word	0x40000c00

08001bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d020      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0202 	mvn.w	r2, #2
 8001c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8d1 	bl	8001dc2 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8c4 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8d3 	bl	8001dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d020      	beq.n	8001c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01b      	beq.n	8001c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0204 	mvn.w	r2, #4
 8001c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2202      	movs	r2, #2
 8001c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8ab 	bl	8001dc2 <HAL_TIM_IC_CaptureCallback>
 8001c6c:	e005      	b.n	8001c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f89e 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f8ad 	bl	8001dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d020      	beq.n	8001ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01b      	beq.n	8001ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0208 	mvn.w	r2, #8
 8001c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f885 	bl	8001dc2 <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f878 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f887 	bl	8001dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d020      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01b      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0210 	mvn.w	r2, #16
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2208      	movs	r2, #8
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f85f 	bl	8001dc2 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f852 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f861 	bl	8001dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00c      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0201 	mvn.w	r2, #1
 8001d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fd52 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00c      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f933 	bl	8001fc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f831 	bl	8001de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0220 	mvn.w	r2, #32
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f906 	bl	8001fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a33      	ldr	r2, [pc, #204]	@ (8001ed8 <TIM_Base_SetConfig+0xe0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00f      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e16:	d00b      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a30      	ldr	r2, [pc, #192]	@ (8001edc <TIM_Base_SetConfig+0xe4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee0 <TIM_Base_SetConfig+0xe8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ee4 <TIM_Base_SetConfig+0xec>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a24      	ldr	r2, [pc, #144]	@ (8001ed8 <TIM_Base_SetConfig+0xe0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00f      	beq.n	8001e6a <TIM_Base_SetConfig+0x72>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e50:	d00b      	beq.n	8001e6a <TIM_Base_SetConfig+0x72>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <TIM_Base_SetConfig+0xe4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <TIM_Base_SetConfig+0x72>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ee0 <TIM_Base_SetConfig+0xe8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <TIM_Base_SetConfig+0x72>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee4 <TIM_Base_SetConfig+0xec>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d108      	bne.n	8001e7c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <TIM_Base_SetConfig+0xe0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f023 0201 	bic.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40012c00 	.word	0x40012c00
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40000800 	.word	0x40000800
 8001ee4:	40000c00 	.word	0x40000c00

08001ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e04b      	b.n	8001f98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f4c:	d00e      	beq.n	8001f6c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a15      	ldr	r2, [pc, #84]	@ (8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a13      	ldr	r2, [pc, #76]	@ (8001fac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d10c      	bne.n	8001f86 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40012c00 	.word	0x40012c00
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800
 8001fb0:	40000c00 	.word	0x40000c00

08001fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fea:	2b84      	cmp	r3, #132	@ 0x84
 8001fec:	d005      	beq.n	8001ffa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001fee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3303      	adds	r3, #3
 8001ff8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800200a:	f000 faf7 	bl	80025fc <vTaskStartScheduler>
  
  return osOK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}

08002014 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002016:	b089      	sub	sp, #36	@ 0x24
 8002018:	af04      	add	r7, sp, #16
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d020      	beq.n	8002068 <osThreadCreate+0x54>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d01c      	beq.n	8002068 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685c      	ldr	r4, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691e      	ldr	r6, [r3, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ffc9 	bl	8001fd8 <makeFreeRtosPriority>
 8002046:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002050:	9202      	str	r2, [sp, #8]
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	9100      	str	r1, [sp, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	4632      	mov	r2, r6
 800205a:	4629      	mov	r1, r5
 800205c:	4620      	mov	r0, r4
 800205e:	f000 f8e8 	bl	8002232 <xTaskCreateStatic>
 8002062:	4603      	mov	r3, r0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e01c      	b.n	80020a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685c      	ldr	r4, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002074:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ffab 	bl	8001fd8 <makeFreeRtosPriority>
 8002082:	4602      	mov	r2, r0
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	9200      	str	r2, [sp, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4632      	mov	r2, r6
 8002090:	4629      	mov	r1, r5
 8002092:	4620      	mov	r0, r4
 8002094:	f000 f92d 	bl	80022f2 <xTaskCreate>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <osDelay+0x16>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	e000      	b.n	80020c4 <osDelay+0x18>
 80020c2:	2301      	movs	r3, #1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fa63 	bl	8002590 <vTaskDelay>
  
  return osOK;
 80020ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f103 0208 	add.w	r2, r3, #8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f103 0208 	add.w	r2, r3, #8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f103 0208 	add.w	r2, r3, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	601a      	str	r2, [r3, #0]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002186:	d103      	bne.n	8002190 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e00c      	b.n	80021aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3308      	adds	r3, #8
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	e002      	b.n	800219e <vListInsert+0x2e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d2f6      	bcs.n	8002198 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	601a      	str	r2, [r3, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6892      	ldr	r2, [r2, #8]
 80021f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6852      	ldr	r2, [r2, #4]
 8002200:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	d103      	bne.n	8002214 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002232:	b580      	push	{r7, lr}
 8002234:	b08e      	sub	sp, #56	@ 0x38
 8002236:	af04      	add	r7, sp, #16
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10b      	bne.n	800225e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800224a:	f383 8811 	msr	BASEPRI, r3
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	e7fd      	b.n	800225a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800225e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <xTaskCreateStatic+0x4a>
	__asm volatile
 8002264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	61fb      	str	r3, [r7, #28]
}
 8002276:	bf00      	nop
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800227c:	23a0      	movs	r3, #160	@ 0xa0
 800227e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2ba0      	cmp	r3, #160	@ 0xa0
 8002284:	d00b      	beq.n	800229e <xTaskCreateStatic+0x6c>
	__asm volatile
 8002286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228a:	f383 8811 	msr	BASEPRI, r3
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	f3bf 8f4f 	dsb	sy
 8002296:	61bb      	str	r3, [r7, #24]
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	e7fd      	b.n	800229a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800229e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80022a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01e      	beq.n	80022e4 <xTaskCreateStatic+0xb2>
 80022a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022be:	2300      	movs	r3, #0
 80022c0:	9303      	str	r3, [sp, #12]
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	9302      	str	r3, [sp, #8]
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f850 	bl	800237c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022de:	f000 f8ed 	bl	80024bc <prvAddNewTaskToReadyList>
 80022e2:	e001      	b.n	80022e8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80022e8:	697b      	ldr	r3, [r7, #20]
	}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3728      	adds	r7, #40	@ 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b08c      	sub	sp, #48	@ 0x30
 80022f6:	af04      	add	r7, sp, #16
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fea2 	bl	8003050 <pvPortMalloc>
 800230c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00e      	beq.n	8002332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002314:	20a0      	movs	r0, #160	@ 0xa0
 8002316:	f000 fe9b 	bl	8003050 <pvPortMalloc>
 800231a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
 8002328:	e005      	b.n	8002336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f000 ff5e 	bl	80031ec <vPortFree>
 8002330:	e001      	b.n	8002336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d017      	beq.n	800236c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002344:	88fa      	ldrh	r2, [r7, #6]
 8002346:	2300      	movs	r3, #0
 8002348:	9303      	str	r3, [sp, #12]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f80e 	bl	800237c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002360:	69f8      	ldr	r0, [r7, #28]
 8002362:	f000 f8ab 	bl	80024bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002366:	2301      	movs	r3, #1
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	e002      	b.n	8002372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800236c:	f04f 33ff 	mov.w	r3, #4294967295
 8002370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002372:	69bb      	ldr	r3, [r7, #24]
	}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002394:	3b01      	subs	r3, #1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f023 0307 	bic.w	r3, r3, #7
 80023a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80023ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	617b      	str	r3, [r7, #20]
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	e7fd      	b.n	80023c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01f      	beq.n	800240c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e012      	b.n	80023f8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	4413      	add	r3, r2
 80023d8:	7819      	ldrb	r1, [r3, #0]
 80023da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	3334      	adds	r3, #52	@ 0x34
 80023e2:	460a      	mov	r2, r1
 80023e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	d9e9      	bls.n	80023d2 <prvInitialiseNewTask+0x56>
 80023fe:	e000      	b.n	8002402 <prvInitialiseNewTask+0x86>
			{
				break;
 8002400:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800240a:	e003      	b.n	8002414 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800240c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002416:	2b06      	cmp	r3, #6
 8002418:	d901      	bls.n	800241e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800241a:	2306      	movs	r3, #6
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800241e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002420:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	2200      	movs	r2, #0
 800242e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002432:	3304      	adds	r3, #4
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fe6c 	bl	8002112 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	3318      	adds	r3, #24
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fe67 	bl	8002112 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002448:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244c:	f1c3 0207 	rsb	r2, r3, #7
 8002450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002452:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	2200      	movs	r2, #0
 800245e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	2200      	movs	r2, #0
 8002466:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	334c      	adds	r3, #76	@ 0x4c
 800246e:	224c      	movs	r2, #76	@ 0x4c
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f000 ffd8 	bl	8003428 <memset>
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	4a0d      	ldr	r2, [pc, #52]	@ (80024b0 <prvInitialiseNewTask+0x134>)
 800247c:	651a      	str	r2, [r3, #80]	@ 0x50
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	4a0c      	ldr	r2, [pc, #48]	@ (80024b4 <prvInitialiseNewTask+0x138>)
 8002482:	655a      	str	r2, [r3, #84]	@ 0x54
 8002484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002486:	4a0c      	ldr	r2, [pc, #48]	@ (80024b8 <prvInitialiseNewTask+0x13c>)
 8002488:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	68f9      	ldr	r1, [r7, #12]
 800248e:	69b8      	ldr	r0, [r7, #24]
 8002490:	f000 fc28 	bl	8002ce4 <pxPortInitialiseStack>
 8002494:	4602      	mov	r2, r0
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800249a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024a6:	bf00      	nop
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20001508 	.word	0x20001508
 80024b4:	20001570 	.word	0x20001570
 80024b8:	200015d8 	.word	0x200015d8

080024bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024c4:	f000 fd02 	bl	8002ecc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002574 <prvAddNewTaskToReadyList+0xb8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	4a29      	ldr	r2, [pc, #164]	@ (8002574 <prvAddNewTaskToReadyList+0xb8>)
 80024d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80024d2:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <prvAddNewTaskToReadyList+0xbc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024da:	4a27      	ldr	r2, [pc, #156]	@ (8002578 <prvAddNewTaskToReadyList+0xbc>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024e0:	4b24      	ldr	r3, [pc, #144]	@ (8002574 <prvAddNewTaskToReadyList+0xb8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d110      	bne.n	800250a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80024e8:	f000 fad2 	bl	8002a90 <prvInitialiseTaskLists>
 80024ec:	e00d      	b.n	800250a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80024ee:	4b23      	ldr	r3, [pc, #140]	@ (800257c <prvAddNewTaskToReadyList+0xc0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024f6:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <prvAddNewTaskToReadyList+0xbc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	429a      	cmp	r2, r3
 8002502:	d802      	bhi.n	800250a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002504:	4a1c      	ldr	r2, [pc, #112]	@ (8002578 <prvAddNewTaskToReadyList+0xbc>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800250a:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <prvAddNewTaskToReadyList+0xc4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	4a1b      	ldr	r2, [pc, #108]	@ (8002580 <prvAddNewTaskToReadyList+0xc4>)
 8002512:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <prvAddNewTaskToReadyList+0xc8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4313      	orrs	r3, r2
 8002522:	4a18      	ldr	r2, [pc, #96]	@ (8002584 <prvAddNewTaskToReadyList+0xc8>)
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4a15      	ldr	r2, [pc, #84]	@ (8002588 <prvAddNewTaskToReadyList+0xcc>)
 8002534:	441a      	add	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f7ff fdf4 	bl	800212a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002542:	f000 fcf3 	bl	8002f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <prvAddNewTaskToReadyList+0xc0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00e      	beq.n	800256c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800254e:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <prvAddNewTaskToReadyList+0xbc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002558:	429a      	cmp	r2, r3
 800255a:	d207      	bcs.n	800256c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800255c:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <prvAddNewTaskToReadyList+0xd0>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200004b4 	.word	0x200004b4
 8002578:	200003b4 	.word	0x200003b4
 800257c:	200004c0 	.word	0x200004c0
 8002580:	200004d0 	.word	0x200004d0
 8002584:	200004bc 	.word	0x200004bc
 8002588:	200003b8 	.word	0x200003b8
 800258c:	e000ed04 	.word	0xe000ed04

08002590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d018      	beq.n	80025d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80025a2:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <vTaskDelay+0x64>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <vTaskDelay+0x32>
	__asm volatile
 80025aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	60bb      	str	r3, [r7, #8]
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	e7fd      	b.n	80025be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80025c2:	f000 f885 	bl	80026d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80025c6:	2100      	movs	r1, #0
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fb25 	bl	8002c18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80025ce:	f000 f88d 	bl	80026ec <xTaskResumeAll>
 80025d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d107      	bne.n	80025ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <vTaskDelay+0x68>)
 80025dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200004dc 	.word	0x200004dc
 80025f8:	e000ed04 	.word	0xe000ed04

080025fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800260a:	463a      	mov	r2, r7
 800260c:	1d39      	adds	r1, r7, #4
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff82 	bl	800051c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	9202      	str	r2, [sp, #8]
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2300      	movs	r3, #0
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2300      	movs	r3, #0
 8002628:	460a      	mov	r2, r1
 800262a:	4921      	ldr	r1, [pc, #132]	@ (80026b0 <vTaskStartScheduler+0xb4>)
 800262c:	4821      	ldr	r0, [pc, #132]	@ (80026b4 <vTaskStartScheduler+0xb8>)
 800262e:	f7ff fe00 	bl	8002232 <xTaskCreateStatic>
 8002632:	4603      	mov	r3, r0
 8002634:	4a20      	ldr	r2, [pc, #128]	@ (80026b8 <vTaskStartScheduler+0xbc>)
 8002636:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002638:	4b1f      	ldr	r3, [pc, #124]	@ (80026b8 <vTaskStartScheduler+0xbc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002640:	2301      	movs	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e001      	b.n	800264a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d11b      	bne.n	8002688 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	613b      	str	r3, [r7, #16]
}
 8002662:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002664:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <vTaskStartScheduler+0xc0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	334c      	adds	r3, #76	@ 0x4c
 800266a:	4a15      	ldr	r2, [pc, #84]	@ (80026c0 <vTaskStartScheduler+0xc4>)
 800266c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <vTaskStartScheduler+0xc8>)
 8002670:	f04f 32ff 	mov.w	r2, #4294967295
 8002674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002676:	4b14      	ldr	r3, [pc, #80]	@ (80026c8 <vTaskStartScheduler+0xcc>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800267c:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <vTaskStartScheduler+0xd0>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002682:	f000 fbb1 	bl	8002de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002686:	e00f      	b.n	80026a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d10b      	bne.n	80026a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	60fb      	str	r3, [r7, #12]
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <vTaskStartScheduler+0xa8>
}
 80026a8:	bf00      	nop
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	08003618 	.word	0x08003618
 80026b4:	08002a61 	.word	0x08002a61
 80026b8:	200004d8 	.word	0x200004d8
 80026bc:	200003b4 	.word	0x200003b4
 80026c0:	20000010 	.word	0x20000010
 80026c4:	200004d4 	.word	0x200004d4
 80026c8:	200004c0 	.word	0x200004c0
 80026cc:	200004b8 	.word	0x200004b8

080026d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <vTaskSuspendAll+0x18>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	4a03      	ldr	r2, [pc, #12]	@ (80026e8 <vTaskSuspendAll+0x18>)
 80026dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	200004dc 	.word	0x200004dc

080026ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80026fa:	4b42      	ldr	r3, [pc, #264]	@ (8002804 <xTaskResumeAll+0x118>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <xTaskResumeAll+0x2e>
	__asm volatile
 8002702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	603b      	str	r3, [r7, #0]
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	e7fd      	b.n	8002716 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800271a:	f000 fbd7 	bl	8002ecc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800271e:	4b39      	ldr	r3, [pc, #228]	@ (8002804 <xTaskResumeAll+0x118>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3b01      	subs	r3, #1
 8002724:	4a37      	ldr	r2, [pc, #220]	@ (8002804 <xTaskResumeAll+0x118>)
 8002726:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002728:	4b36      	ldr	r3, [pc, #216]	@ (8002804 <xTaskResumeAll+0x118>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d161      	bne.n	80027f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002730:	4b35      	ldr	r3, [pc, #212]	@ (8002808 <xTaskResumeAll+0x11c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05d      	beq.n	80027f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002738:	e02e      	b.n	8002798 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800273a:	4b34      	ldr	r3, [pc, #208]	@ (800280c <xTaskResumeAll+0x120>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3318      	adds	r3, #24
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fd4a 	bl	80021e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3304      	adds	r3, #4
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fd45 	bl	80021e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	4b2c      	ldr	r3, [pc, #176]	@ (8002810 <xTaskResumeAll+0x124>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	4a2a      	ldr	r2, [pc, #168]	@ (8002810 <xTaskResumeAll+0x124>)
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4a27      	ldr	r2, [pc, #156]	@ (8002814 <xTaskResumeAll+0x128>)
 8002776:	441a      	add	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f7ff fcd3 	bl	800212a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002788:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <xTaskResumeAll+0x12c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	429a      	cmp	r2, r3
 8002790:	d302      	bcc.n	8002798 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002792:	4b22      	ldr	r3, [pc, #136]	@ (800281c <xTaskResumeAll+0x130>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002798:	4b1c      	ldr	r3, [pc, #112]	@ (800280c <xTaskResumeAll+0x120>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1cc      	bne.n	800273a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80027a6:	f000 fa17 	bl	8002bd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <xTaskResumeAll+0x134>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80027b6:	f000 f837 	bl	8002828 <xTaskIncrementTick>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80027c0:	4b16      	ldr	r3, [pc, #88]	@ (800281c <xTaskResumeAll+0x130>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f1      	bne.n	80027b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80027d2:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <xTaskResumeAll+0x134>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80027d8:	4b10      	ldr	r3, [pc, #64]	@ (800281c <xTaskResumeAll+0x130>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80027e0:	2301      	movs	r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <xTaskResumeAll+0x138>)
 80027e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80027f4:	f000 fb9a 	bl	8002f2c <vPortExitCritical>

	return xAlreadyYielded;
 80027f8:	68bb      	ldr	r3, [r7, #8]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200004dc 	.word	0x200004dc
 8002808:	200004b4 	.word	0x200004b4
 800280c:	20000474 	.word	0x20000474
 8002810:	200004bc 	.word	0x200004bc
 8002814:	200003b8 	.word	0x200003b8
 8002818:	200003b4 	.word	0x200003b4
 800281c:	200004c8 	.word	0x200004c8
 8002820:	200004c4 	.word	0x200004c4
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002832:	4b4f      	ldr	r3, [pc, #316]	@ (8002970 <xTaskIncrementTick+0x148>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 808f 	bne.w	800295a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800283c:	4b4d      	ldr	r3, [pc, #308]	@ (8002974 <xTaskIncrementTick+0x14c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002844:	4a4b      	ldr	r2, [pc, #300]	@ (8002974 <xTaskIncrementTick+0x14c>)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d121      	bne.n	8002894 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002850:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <xTaskIncrementTick+0x150>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <xTaskIncrementTick+0x4a>
	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	603b      	str	r3, [r7, #0]
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	e7fd      	b.n	800286e <xTaskIncrementTick+0x46>
 8002872:	4b41      	ldr	r3, [pc, #260]	@ (8002978 <xTaskIncrementTick+0x150>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	4b40      	ldr	r3, [pc, #256]	@ (800297c <xTaskIncrementTick+0x154>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3e      	ldr	r2, [pc, #248]	@ (8002978 <xTaskIncrementTick+0x150>)
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4a3e      	ldr	r2, [pc, #248]	@ (800297c <xTaskIncrementTick+0x154>)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b3e      	ldr	r3, [pc, #248]	@ (8002980 <xTaskIncrementTick+0x158>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	4a3c      	ldr	r2, [pc, #240]	@ (8002980 <xTaskIncrementTick+0x158>)
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	f000 f9a2 	bl	8002bd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002894:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <xTaskIncrementTick+0x15c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	429a      	cmp	r2, r3
 800289c:	d348      	bcc.n	8002930 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800289e:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <xTaskIncrementTick+0x150>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028a8:	4b36      	ldr	r3, [pc, #216]	@ (8002984 <xTaskIncrementTick+0x15c>)
 80028aa:	f04f 32ff 	mov.w	r2, #4294967295
 80028ae:	601a      	str	r2, [r3, #0]
					break;
 80028b0:	e03e      	b.n	8002930 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <xTaskIncrementTick+0x150>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d203      	bcs.n	80028d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80028ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002984 <xTaskIncrementTick+0x15c>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80028d0:	e02e      	b.n	8002930 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3304      	adds	r3, #4
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fc82 	bl	80021e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	3318      	adds	r3, #24
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fc79 	bl	80021e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <xTaskIncrementTick+0x160>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	4a22      	ldr	r2, [pc, #136]	@ (8002988 <xTaskIncrementTick+0x160>)
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4a1f      	ldr	r2, [pc, #124]	@ (800298c <xTaskIncrementTick+0x164>)
 800290e:	441a      	add	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	3304      	adds	r3, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f7ff fc07 	bl	800212a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002920:	4b1b      	ldr	r3, [pc, #108]	@ (8002990 <xTaskIncrementTick+0x168>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	429a      	cmp	r2, r3
 8002928:	d3b9      	bcc.n	800289e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800292a:	2301      	movs	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800292e:	e7b6      	b.n	800289e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002930:	4b17      	ldr	r3, [pc, #92]	@ (8002990 <xTaskIncrementTick+0x168>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002936:	4915      	ldr	r1, [pc, #84]	@ (800298c <xTaskIncrementTick+0x164>)
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d901      	bls.n	800294c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002948:	2301      	movs	r3, #1
 800294a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <xTaskIncrementTick+0x16c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002954:	2301      	movs	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e004      	b.n	8002964 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800295a:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <xTaskIncrementTick+0x170>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a0d      	ldr	r2, [pc, #52]	@ (8002998 <xTaskIncrementTick+0x170>)
 8002962:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002964:	697b      	ldr	r3, [r7, #20]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200004dc 	.word	0x200004dc
 8002974:	200004b8 	.word	0x200004b8
 8002978:	2000046c 	.word	0x2000046c
 800297c:	20000470 	.word	0x20000470
 8002980:	200004cc 	.word	0x200004cc
 8002984:	200004d4 	.word	0x200004d4
 8002988:	200004bc 	.word	0x200004bc
 800298c:	200003b8 	.word	0x200003b8
 8002990:	200003b4 	.word	0x200003b4
 8002994:	200004c8 	.word	0x200004c8
 8002998:	200004c4 	.word	0x200004c4

0800299c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029a2:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <vTaskSwitchContext+0xac>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029aa:	4b28      	ldr	r3, [pc, #160]	@ (8002a4c <vTaskSwitchContext+0xb0>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80029b0:	e045      	b.n	8002a3e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80029b2:	4b26      	ldr	r3, [pc, #152]	@ (8002a4c <vTaskSwitchContext+0xb0>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b8:	4b25      	ldr	r3, [pc, #148]	@ (8002a50 <vTaskSwitchContext+0xb4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80029c6:	7afb      	ldrb	r3, [r7, #11]
 80029c8:	f1c3 031f 	rsb	r3, r3, #31
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	4921      	ldr	r1, [pc, #132]	@ (8002a54 <vTaskSwitchContext+0xb8>)
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10b      	bne.n	80029fa <vTaskSwitchContext+0x5e>
	__asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	607b      	str	r3, [r7, #4]
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	e7fd      	b.n	80029f6 <vTaskSwitchContext+0x5a>
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <vTaskSwitchContext+0xb8>)
 8002a06:	4413      	add	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d104      	bne.n	8002a2a <vTaskSwitchContext+0x8e>
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a09      	ldr	r2, [pc, #36]	@ (8002a58 <vTaskSwitchContext+0xbc>)
 8002a32:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <vTaskSwitchContext+0xbc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	334c      	adds	r3, #76	@ 0x4c
 8002a3a:	4a08      	ldr	r2, [pc, #32]	@ (8002a5c <vTaskSwitchContext+0xc0>)
 8002a3c:	6013      	str	r3, [r2, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	200004dc 	.word	0x200004dc
 8002a4c:	200004c8 	.word	0x200004c8
 8002a50:	200004bc 	.word	0x200004bc
 8002a54:	200003b8 	.word	0x200003b8
 8002a58:	200003b4 	.word	0x200003b4
 8002a5c:	20000010 	.word	0x20000010

08002a60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a68:	f000 f852 	bl	8002b10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a6c:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <prvIdleTask+0x28>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d9f9      	bls.n	8002a68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <prvIdleTask+0x2c>)
 8002a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002a84:	e7f0      	b.n	8002a68 <prvIdleTask+0x8>
 8002a86:	bf00      	nop
 8002a88:	200003b8 	.word	0x200003b8
 8002a8c:	e000ed04 	.word	0xe000ed04

08002a90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	e00c      	b.n	8002ab6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <prvInitialiseTaskLists+0x60>)
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fb12 	bl	80020d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d9ef      	bls.n	8002a9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002abc:	480d      	ldr	r0, [pc, #52]	@ (8002af4 <prvInitialiseTaskLists+0x64>)
 8002abe:	f7ff fb09 	bl	80020d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ac2:	480d      	ldr	r0, [pc, #52]	@ (8002af8 <prvInitialiseTaskLists+0x68>)
 8002ac4:	f7ff fb06 	bl	80020d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ac8:	480c      	ldr	r0, [pc, #48]	@ (8002afc <prvInitialiseTaskLists+0x6c>)
 8002aca:	f7ff fb03 	bl	80020d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ace:	480c      	ldr	r0, [pc, #48]	@ (8002b00 <prvInitialiseTaskLists+0x70>)
 8002ad0:	f7ff fb00 	bl	80020d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ad4:	480b      	ldr	r0, [pc, #44]	@ (8002b04 <prvInitialiseTaskLists+0x74>)
 8002ad6:	f7ff fafd 	bl	80020d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <prvInitialiseTaskLists+0x78>)
 8002adc:	4a05      	ldr	r2, [pc, #20]	@ (8002af4 <prvInitialiseTaskLists+0x64>)
 8002ade:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <prvInitialiseTaskLists+0x7c>)
 8002ae2:	4a05      	ldr	r2, [pc, #20]	@ (8002af8 <prvInitialiseTaskLists+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200003b8 	.word	0x200003b8
 8002af4:	20000444 	.word	0x20000444
 8002af8:	20000458 	.word	0x20000458
 8002afc:	20000474 	.word	0x20000474
 8002b00:	20000488 	.word	0x20000488
 8002b04:	200004a0 	.word	0x200004a0
 8002b08:	2000046c 	.word	0x2000046c
 8002b0c:	20000470 	.word	0x20000470

08002b10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b16:	e019      	b.n	8002b4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b18:	f000 f9d8 	bl	8002ecc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b1c:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <prvCheckTasksWaitingTermination+0x50>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fb59 	bl	80021e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <prvCheckTasksWaitingTermination+0x54>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	4a0b      	ldr	r2, [pc, #44]	@ (8002b64 <prvCheckTasksWaitingTermination+0x54>)
 8002b36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b38:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <prvCheckTasksWaitingTermination+0x58>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b68 <prvCheckTasksWaitingTermination+0x58>)
 8002b40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b42:	f000 f9f3 	bl	8002f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f810 	bl	8002b6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b4c:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <prvCheckTasksWaitingTermination+0x58>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e1      	bne.n	8002b18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000488 	.word	0x20000488
 8002b64:	200004b4 	.word	0x200004b4
 8002b68:	2000049c 	.word	0x2000049c

08002b6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	334c      	adds	r3, #76	@ 0x4c
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fc5d 	bl	8003438 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d108      	bne.n	8002b9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fb2d 	bl	80031ec <vPortFree>
				vPortFree( pxTCB );
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fb2a 	bl	80031ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b98:	e019      	b.n	8002bce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d103      	bne.n	8002bac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fb21 	bl	80031ec <vPortFree>
	}
 8002baa:	e010      	b.n	8002bce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d00b      	beq.n	8002bce <prvDeleteTCB+0x62>
	__asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	60fb      	str	r3, [r7, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	e7fd      	b.n	8002bca <prvDeleteTCB+0x5e>
	}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bde:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <prvResetNextTaskUnblockTime+0x38>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002be8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <prvResetNextTaskUnblockTime+0x3c>)
 8002bea:	f04f 32ff 	mov.w	r2, #4294967295
 8002bee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002bf0:	e008      	b.n	8002c04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf2:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <prvResetNextTaskUnblockTime+0x38>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <prvResetNextTaskUnblockTime+0x3c>)
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	2000046c 	.word	0x2000046c
 8002c14:	200004d4 	.word	0x200004d4

08002c18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002c22:	4b29      	ldr	r3, [pc, #164]	@ (8002cc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c28:	4b28      	ldr	r3, [pc, #160]	@ (8002ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fad6 	bl	80021e0 <uxListRemove>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002c3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	2201      	movs	r2, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	4b21      	ldr	r3, [pc, #132]	@ (8002cd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	4a20      	ldr	r2, [pc, #128]	@ (8002cd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d10a      	bne.n	8002c70 <prvAddCurrentTaskToDelayedList+0x58>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c60:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3304      	adds	r3, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	481a      	ldr	r0, [pc, #104]	@ (8002cd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002c6a:	f7ff fa5e 	bl	800212a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c6e:	e026      	b.n	8002cbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d209      	bcs.n	8002c9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3304      	adds	r3, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f7ff fa6b 	bl	8002170 <vListInsert>
}
 8002c9a:	e010      	b.n	8002cbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f7ff fa61 	bl	8002170 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002cae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d202      	bcs.n	8002cbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002cb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6013      	str	r3, [r2, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200004b8 	.word	0x200004b8
 8002ccc:	200003b4 	.word	0x200003b4
 8002cd0:	200004bc 	.word	0x200004bc
 8002cd4:	200004a0 	.word	0x200004a0
 8002cd8:	20000470 	.word	0x20000470
 8002cdc:	2000046c 	.word	0x2000046c
 8002ce0:	200004d4 	.word	0x200004d4

08002ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3b04      	subs	r3, #4
 8002d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3b04      	subs	r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d14:	4a08      	ldr	r2, [pc, #32]	@ (8002d38 <pxPortInitialiseStack+0x54>)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3b14      	subs	r3, #20
 8002d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3b20      	subs	r3, #32
 8002d2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	08002d3d 	.word	0x08002d3d

08002d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d46:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <prvTaskExitError+0x54>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d00b      	beq.n	8002d68 <prvTaskExitError+0x2c>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	60fb      	str	r3, [r7, #12]
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <prvTaskExitError+0x28>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	60bb      	str	r3, [r7, #8]
}
 8002d7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d7c:	bf00      	nop
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0fc      	beq.n	8002d7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	2000000c 	.word	0x2000000c
	...

08002da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002da0:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <pxCurrentTCBConst2>)
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	6808      	ldr	r0, [r1, #0]
 8002da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002daa:	f380 8809 	msr	PSP, r0
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f380 8811 	msr	BASEPRI, r0
 8002dba:	f04e 0e0d 	orr.w	lr, lr, #13
 8002dbe:	4770      	bx	lr

08002dc0 <pxCurrentTCBConst2>:
 8002dc0:	200003b4 	.word	0x200003b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop

08002dc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002dc8:	4806      	ldr	r0, [pc, #24]	@ (8002de4 <prvPortStartFirstTask+0x1c>)
 8002dca:	6800      	ldr	r0, [r0, #0]
 8002dcc:	6800      	ldr	r0, [r0, #0]
 8002dce:	f380 8808 	msr	MSP, r0
 8002dd2:	b662      	cpsie	i
 8002dd4:	b661      	cpsie	f
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	df00      	svc	0
 8002de0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002de2:	bf00      	nop
 8002de4:	e000ed08 	.word	0xe000ed08

08002de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dee:	4b32      	ldr	r3, [pc, #200]	@ (8002eb8 <xPortStartScheduler+0xd0>)
 8002df0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	22ff      	movs	r2, #255	@ 0xff
 8002dfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b2a      	ldr	r3, [pc, #168]	@ (8002ebc <xPortStartScheduler+0xd4>)
 8002e14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e16:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec0 <xPortStartScheduler+0xd8>)
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e1c:	e009      	b.n	8002e32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002e1e:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <xPortStartScheduler+0xd8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	4a26      	ldr	r2, [pc, #152]	@ (8002ec0 <xPortStartScheduler+0xd8>)
 8002e26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3a:	2b80      	cmp	r3, #128	@ 0x80
 8002e3c:	d0ef      	beq.n	8002e1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <xPortStartScheduler+0xd8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00b      	beq.n	8002e62 <xPortStartScheduler+0x7a>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	60bb      	str	r3, [r7, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	e7fd      	b.n	8002e5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e62:	4b17      	ldr	r3, [pc, #92]	@ (8002ec0 <xPortStartScheduler+0xd8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <xPortStartScheduler+0xd8>)
 8002e6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ec0 <xPortStartScheduler+0xd8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e74:	4a12      	ldr	r2, [pc, #72]	@ (8002ec0 <xPortStartScheduler+0xd8>)
 8002e76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e80:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <xPortStartScheduler+0xdc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec4 <xPortStartScheduler+0xdc>)
 8002e86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <xPortStartScheduler+0xdc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec4 <xPortStartScheduler+0xdc>)
 8002e92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002e96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e98:	f000 f8b8 	bl	800300c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <xPortStartScheduler+0xe0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ea2:	f7ff ff91 	bl	8002dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ea6:	f7ff fd79 	bl	800299c <vTaskSwitchContext>
	prvTaskExitError();
 8002eaa:	f7ff ff47 	bl	8002d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	e000e400 	.word	0xe000e400
 8002ebc:	200004e0 	.word	0x200004e0
 8002ec0:	200004e4 	.word	0x200004e4
 8002ec4:	e000ed20 	.word	0xe000ed20
 8002ec8:	2000000c 	.word	0x2000000c

08002ecc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	607b      	str	r3, [r7, #4]
}
 8002ee4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f24 <vPortEnterCritical+0x58>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	4a0d      	ldr	r2, [pc, #52]	@ (8002f24 <vPortEnterCritical+0x58>)
 8002eee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <vPortEnterCritical+0x58>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d110      	bne.n	8002f1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <vPortEnterCritical+0x5c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <vPortEnterCritical+0x4e>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	603b      	str	r3, [r7, #0]
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	e7fd      	b.n	8002f16 <vPortEnterCritical+0x4a>
	}
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	2000000c 	.word	0x2000000c
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f32:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <vPortExitCritical+0x50>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10b      	bne.n	8002f52 <vPortExitCritical+0x26>
	__asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	607b      	str	r3, [r7, #4]
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	e7fd      	b.n	8002f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f52:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <vPortExitCritical+0x50>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <vPortExitCritical+0x50>)
 8002f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f5c:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <vPortExitCritical+0x50>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <vPortExitCritical+0x44>
 8002f64:	2300      	movs	r3, #0
 8002f66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	2000000c 	.word	0x2000000c

08002f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f80:	f3ef 8009 	mrs	r0, PSP
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <pxCurrentTCBConst>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f90:	6010      	str	r0, [r2, #0]
 8002f92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002f96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002f9a:	f380 8811 	msr	BASEPRI, r0
 8002f9e:	f7ff fcfd 	bl	800299c <vTaskSwitchContext>
 8002fa2:	f04f 0000 	mov.w	r0, #0
 8002fa6:	f380 8811 	msr	BASEPRI, r0
 8002faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	6808      	ldr	r0, [r1, #0]
 8002fb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002fb6:	f380 8809 	msr	PSP, r0
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	4770      	bx	lr

08002fc0 <pxCurrentTCBConst>:
 8002fc0:	200003b4 	.word	0x200003b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop

08002fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8002fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	607b      	str	r3, [r7, #4]
}
 8002fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002fe2:	f7ff fc21 	bl	8002828 <xTaskIncrementTick>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <SysTick_Handler+0x40>)
 8002fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	f383 8811 	msr	BASEPRI, r3
}
 8002ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003010:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <vPortSetupTimerInterrupt+0x30>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003016:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <vPortSetupTimerInterrupt+0x34>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800301c:	4b09      	ldr	r3, [pc, #36]	@ (8003044 <vPortSetupTimerInterrupt+0x38>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a09      	ldr	r2, [pc, #36]	@ (8003048 <vPortSetupTimerInterrupt+0x3c>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	4a08      	ldr	r2, [pc, #32]	@ (800304c <vPortSetupTimerInterrupt+0x40>)
 800302a:	3b01      	subs	r3, #1
 800302c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800302e:	4b03      	ldr	r3, [pc, #12]	@ (800303c <vPortSetupTimerInterrupt+0x30>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	e000e010 	.word	0xe000e010
 8003040:	e000e018 	.word	0xe000e018
 8003044:	20000000 	.word	0x20000000
 8003048:	10624dd3 	.word	0x10624dd3
 800304c:	e000e014 	.word	0xe000e014

08003050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	@ 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800305c:	f7ff fb38 	bl	80026d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003060:	4b5c      	ldr	r3, [pc, #368]	@ (80031d4 <pvPortMalloc+0x184>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003068:	f000 f924 	bl	80032b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800306c:	4b5a      	ldr	r3, [pc, #360]	@ (80031d8 <pvPortMalloc+0x188>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 8095 	bne.w	80031a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01e      	beq.n	80030be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003080:	2208      	movs	r2, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	2b00      	cmp	r3, #0
 8003090:	d015      	beq.n	80030be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f023 0307 	bic.w	r3, r3, #7
 8003098:	3308      	adds	r3, #8
 800309a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <pvPortMalloc+0x6e>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	617b      	str	r3, [r7, #20]
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d06f      	beq.n	80031a4 <pvPortMalloc+0x154>
 80030c4:	4b45      	ldr	r3, [pc, #276]	@ (80031dc <pvPortMalloc+0x18c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d86a      	bhi.n	80031a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80030ce:	4b44      	ldr	r3, [pc, #272]	@ (80031e0 <pvPortMalloc+0x190>)
 80030d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80030d2:	4b43      	ldr	r3, [pc, #268]	@ (80031e0 <pvPortMalloc+0x190>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030d8:	e004      	b.n	80030e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d903      	bls.n	80030f6 <pvPortMalloc+0xa6>
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f1      	bne.n	80030da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80030f6:	4b37      	ldr	r3, [pc, #220]	@ (80031d4 <pvPortMalloc+0x184>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d051      	beq.n	80031a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	4413      	add	r3, r2
 8003108:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	1ad2      	subs	r2, r2, r3
 800311a:	2308      	movs	r3, #8
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	429a      	cmp	r2, r3
 8003120:	d920      	bls.n	8003164 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <pvPortMalloc+0xfc>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	613b      	str	r3, [r7, #16]
}
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800315e:	69b8      	ldr	r0, [r7, #24]
 8003160:	f000 f90a 	bl	8003378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003164:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <pvPortMalloc+0x18c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	4a1b      	ldr	r2, [pc, #108]	@ (80031dc <pvPortMalloc+0x18c>)
 8003170:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003172:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <pvPortMalloc+0x18c>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <pvPortMalloc+0x194>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d203      	bcs.n	8003186 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800317e:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <pvPortMalloc+0x18c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <pvPortMalloc+0x194>)
 8003184:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <pvPortMalloc+0x188>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	431a      	orrs	r2, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800319a:	4b13      	ldr	r3, [pc, #76]	@ (80031e8 <pvPortMalloc+0x198>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a11      	ldr	r2, [pc, #68]	@ (80031e8 <pvPortMalloc+0x198>)
 80031a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031a4:	f7ff faa2 	bl	80026ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <pvPortMalloc+0x17a>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	60fb      	str	r3, [r7, #12]
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	e7fd      	b.n	80031c6 <pvPortMalloc+0x176>
	return pvReturn;
 80031ca:	69fb      	ldr	r3, [r7, #28]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	@ 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200014f0 	.word	0x200014f0
 80031d8:	20001504 	.word	0x20001504
 80031dc:	200014f4 	.word	0x200014f4
 80031e0:	200014e8 	.word	0x200014e8
 80031e4:	200014f8 	.word	0x200014f8
 80031e8:	200014fc 	.word	0x200014fc

080031ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d04f      	beq.n	800329e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80031fe:	2308      	movs	r3, #8
 8003200:	425b      	negs	r3, r3
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4413      	add	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4b25      	ldr	r3, [pc, #148]	@ (80032a8 <vPortFree+0xbc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <vPortFree+0x46>
	__asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	60fb      	str	r3, [r7, #12]
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	e7fd      	b.n	800322e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00b      	beq.n	8003252 <vPortFree+0x66>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	60bb      	str	r3, [r7, #8]
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	e7fd      	b.n	800324e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	4b14      	ldr	r3, [pc, #80]	@ (80032a8 <vPortFree+0xbc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01e      	beq.n	800329e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11a      	bne.n	800329e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4b0e      	ldr	r3, [pc, #56]	@ (80032a8 <vPortFree+0xbc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	43db      	mvns	r3, r3
 8003272:	401a      	ands	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003278:	f7ff fa2a 	bl	80026d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <vPortFree+0xc0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4413      	add	r3, r2
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <vPortFree+0xc0>)
 8003288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800328a:	6938      	ldr	r0, [r7, #16]
 800328c:	f000 f874 	bl	8003378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003290:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <vPortFree+0xc4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	4a06      	ldr	r2, [pc, #24]	@ (80032b0 <vPortFree+0xc4>)
 8003298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800329a:	f7ff fa27 	bl	80026ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20001504 	.word	0x20001504
 80032ac:	200014f4 	.word	0x200014f4
 80032b0:	20001500 	.word	0x20001500

080032b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80032c0:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <prvHeapInit+0xac>)
 80032c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00c      	beq.n	80032e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3307      	adds	r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0307 	bic.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003360 <prvHeapInit+0xac>)
 80032e4:	4413      	add	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80032ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003364 <prvHeapInit+0xb0>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80032f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003364 <prvHeapInit+0xb0>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003300:	2208      	movs	r2, #8
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0307 	bic.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <prvHeapInit+0xb4>)
 8003314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003316:	4b14      	ldr	r3, [pc, #80]	@ (8003368 <prvHeapInit+0xb4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <prvHeapInit+0xb4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	1ad2      	subs	r2, r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <prvHeapInit+0xb4>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <prvHeapInit+0xb8>)
 8003342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <prvHeapInit+0xbc>)
 800334a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800334c:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <prvHeapInit+0xc0>)
 800334e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003352:	601a      	str	r2, [r3, #0]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	200004e8 	.word	0x200004e8
 8003364:	200014e8 	.word	0x200014e8
 8003368:	200014f0 	.word	0x200014f0
 800336c:	200014f8 	.word	0x200014f8
 8003370:	200014f4 	.word	0x200014f4
 8003374:	20001504 	.word	0x20001504

08003378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003380:	4b27      	ldr	r3, [pc, #156]	@ (8003420 <prvInsertBlockIntoFreeList+0xa8>)
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e002      	b.n	800338c <prvInsertBlockIntoFreeList+0x14>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	429a      	cmp	r2, r3
 8003394:	d8f7      	bhi.n	8003386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4413      	add	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d108      	bne.n	80033ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	441a      	add	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	441a      	add	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d118      	bne.n	8003400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b14      	ldr	r3, [pc, #80]	@ (8003424 <prvInsertBlockIntoFreeList+0xac>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d00d      	beq.n	80033f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e008      	b.n	8003408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80033f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <prvInsertBlockIntoFreeList+0xac>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e003      	b.n	8003408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	429a      	cmp	r2, r3
 800340e:	d002      	beq.n	8003416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	200014e8 	.word	0x200014e8
 8003424:	200014f0 	.word	0x200014f0

08003428 <memset>:
 8003428:	4603      	mov	r3, r0
 800342a:	4402      	add	r2, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <_reclaim_reent>:
 8003438:	4b29      	ldr	r3, [pc, #164]	@ (80034e0 <_reclaim_reent+0xa8>)
 800343a:	b570      	push	{r4, r5, r6, lr}
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4604      	mov	r4, r0
 8003440:	4283      	cmp	r3, r0
 8003442:	d04b      	beq.n	80034dc <_reclaim_reent+0xa4>
 8003444:	69c3      	ldr	r3, [r0, #28]
 8003446:	b1ab      	cbz	r3, 8003474 <_reclaim_reent+0x3c>
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	b16b      	cbz	r3, 8003468 <_reclaim_reent+0x30>
 800344c:	2500      	movs	r5, #0
 800344e:	69e3      	ldr	r3, [r4, #28]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	5959      	ldr	r1, [r3, r5]
 8003454:	2900      	cmp	r1, #0
 8003456:	d13b      	bne.n	80034d0 <_reclaim_reent+0x98>
 8003458:	3504      	adds	r5, #4
 800345a:	2d80      	cmp	r5, #128	@ 0x80
 800345c:	d1f7      	bne.n	800344e <_reclaim_reent+0x16>
 800345e:	69e3      	ldr	r3, [r4, #28]
 8003460:	4620      	mov	r0, r4
 8003462:	68d9      	ldr	r1, [r3, #12]
 8003464:	f000 f864 	bl	8003530 <_free_r>
 8003468:	69e3      	ldr	r3, [r4, #28]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	b111      	cbz	r1, 8003474 <_reclaim_reent+0x3c>
 800346e:	4620      	mov	r0, r4
 8003470:	f000 f85e 	bl	8003530 <_free_r>
 8003474:	6961      	ldr	r1, [r4, #20]
 8003476:	b111      	cbz	r1, 800347e <_reclaim_reent+0x46>
 8003478:	4620      	mov	r0, r4
 800347a:	f000 f859 	bl	8003530 <_free_r>
 800347e:	69e1      	ldr	r1, [r4, #28]
 8003480:	b111      	cbz	r1, 8003488 <_reclaim_reent+0x50>
 8003482:	4620      	mov	r0, r4
 8003484:	f000 f854 	bl	8003530 <_free_r>
 8003488:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800348a:	b111      	cbz	r1, 8003492 <_reclaim_reent+0x5a>
 800348c:	4620      	mov	r0, r4
 800348e:	f000 f84f 	bl	8003530 <_free_r>
 8003492:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003494:	b111      	cbz	r1, 800349c <_reclaim_reent+0x64>
 8003496:	4620      	mov	r0, r4
 8003498:	f000 f84a 	bl	8003530 <_free_r>
 800349c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800349e:	b111      	cbz	r1, 80034a6 <_reclaim_reent+0x6e>
 80034a0:	4620      	mov	r0, r4
 80034a2:	f000 f845 	bl	8003530 <_free_r>
 80034a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80034a8:	b111      	cbz	r1, 80034b0 <_reclaim_reent+0x78>
 80034aa:	4620      	mov	r0, r4
 80034ac:	f000 f840 	bl	8003530 <_free_r>
 80034b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80034b2:	b111      	cbz	r1, 80034ba <_reclaim_reent+0x82>
 80034b4:	4620      	mov	r0, r4
 80034b6:	f000 f83b 	bl	8003530 <_free_r>
 80034ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80034bc:	b111      	cbz	r1, 80034c4 <_reclaim_reent+0x8c>
 80034be:	4620      	mov	r0, r4
 80034c0:	f000 f836 	bl	8003530 <_free_r>
 80034c4:	6a23      	ldr	r3, [r4, #32]
 80034c6:	b14b      	cbz	r3, 80034dc <_reclaim_reent+0xa4>
 80034c8:	4620      	mov	r0, r4
 80034ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80034ce:	4718      	bx	r3
 80034d0:	680e      	ldr	r6, [r1, #0]
 80034d2:	4620      	mov	r0, r4
 80034d4:	f000 f82c 	bl	8003530 <_free_r>
 80034d8:	4631      	mov	r1, r6
 80034da:	e7bb      	b.n	8003454 <_reclaim_reent+0x1c>
 80034dc:	bd70      	pop	{r4, r5, r6, pc}
 80034de:	bf00      	nop
 80034e0:	20000010 	.word	0x20000010

080034e4 <__libc_init_array>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	2600      	movs	r6, #0
 80034e8:	4d0c      	ldr	r5, [pc, #48]	@ (800351c <__libc_init_array+0x38>)
 80034ea:	4c0d      	ldr	r4, [pc, #52]	@ (8003520 <__libc_init_array+0x3c>)
 80034ec:	1b64      	subs	r4, r4, r5
 80034ee:	10a4      	asrs	r4, r4, #2
 80034f0:	42a6      	cmp	r6, r4
 80034f2:	d109      	bne.n	8003508 <__libc_init_array+0x24>
 80034f4:	f000 f870 	bl	80035d8 <_init>
 80034f8:	2600      	movs	r6, #0
 80034fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003524 <__libc_init_array+0x40>)
 80034fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003528 <__libc_init_array+0x44>)
 80034fe:	1b64      	subs	r4, r4, r5
 8003500:	10a4      	asrs	r4, r4, #2
 8003502:	42a6      	cmp	r6, r4
 8003504:	d105      	bne.n	8003512 <__libc_init_array+0x2e>
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	f855 3b04 	ldr.w	r3, [r5], #4
 800350c:	4798      	blx	r3
 800350e:	3601      	adds	r6, #1
 8003510:	e7ee      	b.n	80034f0 <__libc_init_array+0xc>
 8003512:	f855 3b04 	ldr.w	r3, [r5], #4
 8003516:	4798      	blx	r3
 8003518:	3601      	adds	r6, #1
 800351a:	e7f2      	b.n	8003502 <__libc_init_array+0x1e>
 800351c:	08003660 	.word	0x08003660
 8003520:	08003660 	.word	0x08003660
 8003524:	08003660 	.word	0x08003660
 8003528:	08003664 	.word	0x08003664

0800352c <__retarget_lock_acquire_recursive>:
 800352c:	4770      	bx	lr

0800352e <__retarget_lock_release_recursive>:
 800352e:	4770      	bx	lr

08003530 <_free_r>:
 8003530:	b538      	push	{r3, r4, r5, lr}
 8003532:	4605      	mov	r5, r0
 8003534:	2900      	cmp	r1, #0
 8003536:	d040      	beq.n	80035ba <_free_r+0x8a>
 8003538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353c:	1f0c      	subs	r4, r1, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	bfb8      	it	lt
 8003542:	18e4      	addlt	r4, r4, r3
 8003544:	f000 f83c 	bl	80035c0 <__malloc_lock>
 8003548:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <_free_r+0x8c>)
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	b933      	cbnz	r3, 800355c <_free_r+0x2c>
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	6014      	str	r4, [r2, #0]
 8003552:	4628      	mov	r0, r5
 8003554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003558:	f000 b838 	b.w	80035cc <__malloc_unlock>
 800355c:	42a3      	cmp	r3, r4
 800355e:	d908      	bls.n	8003572 <_free_r+0x42>
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	1821      	adds	r1, r4, r0
 8003564:	428b      	cmp	r3, r1
 8003566:	bf01      	itttt	eq
 8003568:	6819      	ldreq	r1, [r3, #0]
 800356a:	685b      	ldreq	r3, [r3, #4]
 800356c:	1809      	addeq	r1, r1, r0
 800356e:	6021      	streq	r1, [r4, #0]
 8003570:	e7ed      	b.n	800354e <_free_r+0x1e>
 8003572:	461a      	mov	r2, r3
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	b10b      	cbz	r3, 800357c <_free_r+0x4c>
 8003578:	42a3      	cmp	r3, r4
 800357a:	d9fa      	bls.n	8003572 <_free_r+0x42>
 800357c:	6811      	ldr	r1, [r2, #0]
 800357e:	1850      	adds	r0, r2, r1
 8003580:	42a0      	cmp	r0, r4
 8003582:	d10b      	bne.n	800359c <_free_r+0x6c>
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	4401      	add	r1, r0
 8003588:	1850      	adds	r0, r2, r1
 800358a:	4283      	cmp	r3, r0
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	d1e0      	bne.n	8003552 <_free_r+0x22>
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4408      	add	r0, r1
 8003596:	6010      	str	r0, [r2, #0]
 8003598:	6053      	str	r3, [r2, #4]
 800359a:	e7da      	b.n	8003552 <_free_r+0x22>
 800359c:	d902      	bls.n	80035a4 <_free_r+0x74>
 800359e:	230c      	movs	r3, #12
 80035a0:	602b      	str	r3, [r5, #0]
 80035a2:	e7d6      	b.n	8003552 <_free_r+0x22>
 80035a4:	6820      	ldr	r0, [r4, #0]
 80035a6:	1821      	adds	r1, r4, r0
 80035a8:	428b      	cmp	r3, r1
 80035aa:	bf01      	itttt	eq
 80035ac:	6819      	ldreq	r1, [r3, #0]
 80035ae:	685b      	ldreq	r3, [r3, #4]
 80035b0:	1809      	addeq	r1, r1, r0
 80035b2:	6021      	streq	r1, [r4, #0]
 80035b4:	6063      	str	r3, [r4, #4]
 80035b6:	6054      	str	r4, [r2, #4]
 80035b8:	e7cb      	b.n	8003552 <_free_r+0x22>
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	20001644 	.word	0x20001644

080035c0 <__malloc_lock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	@ (80035c8 <__malloc_lock+0x8>)
 80035c2:	f7ff bfb3 	b.w	800352c <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	20001640 	.word	0x20001640

080035cc <__malloc_unlock>:
 80035cc:	4801      	ldr	r0, [pc, #4]	@ (80035d4 <__malloc_unlock+0x8>)
 80035ce:	f7ff bfae 	b.w	800352e <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	20001640 	.word	0x20001640

080035d8 <_init>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	bf00      	nop
 80035dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035de:	bc08      	pop	{r3}
 80035e0:	469e      	mov	lr, r3
 80035e2:	4770      	bx	lr

080035e4 <_fini>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	bf00      	nop
 80035e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ea:	bc08      	pop	{r3}
 80035ec:	469e      	mov	lr, r3
 80035ee:	4770      	bx	lr
